<!DOCTYPE html>

<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Payment Overlay</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@tabler/core@latest/dist/css/tabler.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@tabler/icons-webfont@latest/dist/tabler-icons.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@tabler/core@1.0.0/dist/css/tabler-flags.min.css">
    <style>
        #payment-overlay {
            width: 100vw;
            overflow: hidden;
        }

        body {
            background: none;
            height: auto;
            font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !important;
        }

        ::-webkit-scrollbar {
            display: none;
        }

        .btn {
            box-shadow: none;
        }

        .slide .btn:not(.btn-primary):hover,
        .slide .btn:not(.btn-primary):focus,
        .slide .btn:not(.btn-primary):focus-visible,
        .slide .btn:not(.btn-primary):active {
            background-color: rgb(240, 240, 240);
        }

        .subscription.active,
        .card-beneficiary.active {
            background-color: #e3f2fd;
            color: rgb(25 109 187);
            border: 1px solid #066fd1 !important;
            cursor: pointer;
        }

        .subscription.paid {
            background-color: #e4fde3;
            color: rgb(25 109 187);
            border: 1px solid #0ed106 !important;
            cursor: pointer;
        }

        .card-beneficiary.active .card-title {
            font-weight: bold;
        }

        .card-beneficiary .uncheck-icon,
        .card-beneficiary .check-icon {
            position: absolute;
            top: 8px;
            right: 8px;
            font-size: 24px;
        }

        .card-beneficiary .uncheck-icon {
            color: #dedede;
            display: block;
        }

        .card-beneficiary .check-icon {
            display: none;
        }

        .card-beneficiary.active .check-icon {
            display: block;
        }

        .card-beneficiary.active .uncheck-icon {
            display: none;
        }

        .slide .btn:not(.btn-primary).active {
            background-color: #e3f2fd;
            color: rgb(25 109 187);
            border: 1px solid #066fd1 !important;
            font-weight: bold;
        }

        #close-overlay {
            position: fixed;
            top: 20px;
            right: 20px;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            background: rgb(213 215 217);
            transition: background-color 0.3s ease;
        }

        #close-overlay:hover {
            background: white;
        }

        .currency-input-container {
            position: relative;
            border: 1px solid #dce1e7;
            border-radius: 4px;
            box-shadow: none;
        }

        .currency-dropdown {
            position: absolute;
            height: 37px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            background-color: white;
            right: 1px;
            top: 4px;
            margin: 0px 4px;
            padding: 0 6px;
            width: 59px;
            border-radius: 3px;
            opacity: 0;
            color: white;
            transition: background-color 0.3s ease;
        }

        .month-tab {
            position: absolute;
            height: 20px;
            right: 8px;
            top: 13px;
            margin: 0px 4px;
            padding: 0 6px;
            width: 60px;
            border-radius: 3px;
            color: #192433;
        }

        .currency-selector {
            position: absolute;
            height: 37px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            background-color: white;
            right: 1px;
            top: 4px;
            margin: 0px 4px;
            padding: 0 6px;
            width: 59px;
            border-radius: 3px;
            color: #192433;
        }

        .currency-dropdown:hover {
            background: black;
            opacity: 0.039;
            cursor: pointer;
            padding: 4px 31px;
        }

        .month,
        .amount {
            width: 100%;
            color: #066fd1 !important;
            font-weight: bold;
            border: 0px;
            box-shadow: none;
        }

        #slide-wrapper {
            background: white;
            max-width: 320px;
            margin: auto;
            overflow: hidden;
        }

        #slide-container {
            transition: transform 0.2s ease-in-out;
            height: 100%;
            display: flex;
            width: 100%;
        }

        .slide {
            display: flex;
            flex-direction: column;
            height: 100%;
            width: 100%;
            flex-shrink: 0;
        }

        #slide-select-amount {
            padding: 8px 28px 28px 28px;
        }

        #slide-select-amount>.footer {
            padding: 0px;
        }

        .slide>.header {
            margin: 0 27px;
        }

        #slide-user-info>.footer,
        #slide-payment-info>.footer,
        #slide-thank-you>.footer {
            padding: 28px;
        }

        #slide-user-info>.body,
        #slide-payment-info>.body {
            margin: 8px 28px;
            margin-top: 1rem;
        }

        .slide .back-btn {
            position: absolute;
            left: 10px;
            top: 17px;
        }

        @keyframes shake {

            0%,
            100% {
                transform: translateX(0);
            }

            25% {
                transform: translateX(-5px);
            }

            50% {
                transform: translateX(5px);
            }

            75% {
                transform: translateX(-5px);
            }
        }

        .shake {
            animation: shake 0.3s ease-in-out;
        }

        input.is-invalid,
        .form-check-input.is-invalid,
        .card-input.is-invalid,
        .text-error {
            background-color: rgba(255, 0, 0, 0.1);
        }

        .form-floating>.form-control:not(:placeholder-shown)~label::after {
            background-color: transparent;
        }

        .form-floating:focus-within {
            z-index: 3;
        }

        #tel-toggle {
            position: absolute;
            z-index: 10;
            width: 54px;
            height: 38px;
            overflow: hidden;
            padding: 8px;
            top: 9px;
            left: 8px;
            border: 0px;
        }

        #tel-toggle .flag {
            height: 1rem;
            margin-right: 5px;
        }

        #tel-toggle svg {
            height: 15px;
            padding: 0px;
            margin-right: -7px !important;
            margin-left: -2px;
        }

        #tel-wrapper .dropdown-menu.show {
            transform: translate3d(0px, 4px, 0px) !important;
            width: 100%;
            height: 259px;
            overflow: scroll;
        }

        #tel-codes>a.dropdown-item.bg-hover {
            background: #f0f0f0;
        }

        #tel-wrapper .dropdown-menu.show::-webkit-scrollbar {
            display: none;
        }

        #tel-wrapper .dropdown-menu .flag {
            height: 1rem;
            margin-left: auto;
        }

        #tel-wrapper input {
            padding-left: 69px;
        }

        #tel-wrapper label {
            margin-left: 57px;
        }

        .form-floating>.form-control.card-input~label {
            color: inherit;
            transform: none;
        }

        .form-floating>.form-control {
            position: relative;
        }

        .form-floating>.form-control.card-input.typing {
            color: var(--tblr-body-color);
            background-color: var(--tblr-bg-forms);
            border-color: #83b7e8;
            outline: 0;
            box-shadow: var(--tblr-box-shadow-input), 0 0 0 .25rem rgba(var(--tblr-primary-rgb), .25);
            z-index: 2;
        }

        .form-floating>.form-control.card-input.active~label {
            color: rgba(var(--tblr-body-color-rgb), .65);
            transform: scale(.85) translateY(-.5rem) translateX(.15rem);
        }

        .faq-answer {
            padding-left: 21px;
            padding-right: 21px;
        }

        #manage-donation {
            padding-left: 21px;
        }

        .transition {
            transition: transform 0.3s ease-in-out;
        }

        .rotated {
            transform: rotate(90deg);
        }

        #project-card {
            min-height: 500px;
        }

        #project-entries {
            max-height: 435px;
            overflow: scroll;
        }

        .form-selectgroup-input:checked+.form-selectgroup-label {
            background-color: #e3f2fd;
            color: rgb(25 109 187);
            border: 1px solid #066fd1 !important;
            font-weight: normal;
        }

        #slide-parent {
            box-shadow: none !important;
        }

        @media (min-width: 768px) {
            #payment-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: none;
                display: flex;
                align-items: center;
                justify-content: center;
                padding-top: 20px;
            }

            #project-card {
                min-height: 580px;
                width: 500px;
            }

            #project-entries {
                height: 430px;
                overflow: scroll;
            }

            #slide-parent {
                padding: 0px;
                margin: 0px;
                max-width: 320px;
            }

            #slide-wrapper {
                height: 100%;
                max-width: 100%;
            }

            .rounded-md-4 {
                border-radius: 1rem;
            }

            .slide>.header {
                margin: 0;
            }

            #monthly-products .entries-selected {
                max-height: 200px;
                overflow: scroll;
            }

            #one-time-products .entries-selected {
                max-height: 100px;
                overflow: scroll;
            }
        }
    </style>
</head>

<body>

    <div id="payment-overlay">
        <div class="row justify-content-center">

            <div id="project-card"
                class="col-12 col-md-6 col-lg-4 card shadow-lg border-0 ms-md-2 me-md-3 p-0 rounded-md-4 overflow-hidden">
                <div class="card-body p-4 d-flex flex-column align-items-start">
                    <img class="mb-3"
                        src="https://res.cloudinary.com/miscellaneous/image/upload/v1737903106/akeurope/Group_427320398.png"
                        style="height: 40px">
                    <h2 class="fw-medium mb-2">{{data.project.slogan}}</h2>
                    <div class="flex-grow-1 w-100 h-100">
                        {{> widgetEntries}}
                    </div>
                    <a href="" class="d-none d-md-block mt-4 text-small">Manage your donation</a>
                </div>
            </div>

            <div id="slide-parent" class="col-12 col-md-5 col-lg-3 card shadow-lg me-md-2 rounded-md-4 overflow-hidden">
                <div id="slide-wrapper">
                    <div id="slide-container">
                        <div class="slide" id="slide-select-amount">
                            <div class="header">
                                <div class="d-flex align-content-center justify-content-center my-3">
                                    <svg fill="none" height="28" viewBox="0 0 28 28" width="28" style="color: #1bc31b"
                                        xmlns="http://www.w3.org/2000/svg"
                                        class="icon-fill shrink-0 font-size-28 text-green-80 me-2" aria-hidden="true">
                                        <g fill="currentColor">
                                            <path clip-rule="evenodd"
                                                d="m15.0393 2.44995c-.6707-.24772-1.4079-.24772-2.0786 0l-8.30715 3.06797c-.39274.14504-.65355.51939-.65355.93807v7.54411c0 3.6861 1.95965 6.6874 4.28911 8.8073 1.16017 1.0557 2.38789 1.8689 3.45309 2.4137 1.1081.5668 1.9145.779 2.2578.779s1.1497-.2122 2.2578-.779c1.0652-.5448 2.2929-1.358 3.4531-2.4137 2.3294-2.1199 4.2891-5.1212 4.2891-8.8073v-7.54411c0-.41868-.2608-.79303-.6536-.93807zm-2.7715-1.876139c1.1179-.412868 2.3465-.412868 3.4644 0l8.3071 3.067969c1.1783.43514 1.9607 1.55819 1.9607 2.81421v7.54411c0 4.4389-2.3618 7.9375-4.943 10.2865-1.2952 1.1786-2.6702 2.092-3.8885 2.7151-1.1754.6012-2.3332.9984-3.1685.9984s-1.9931-.3972-3.1685-.9984c-1.21831-.6231-2.59328-1.5365-3.88847-2.7151-2.58125-2.349-4.94303-5.8476-4.94303-10.2865v-7.54411c0-1.25602.78243-2.37907 1.96066-2.81421z"
                                                fill-rule="evenodd"></path>
                                            <path
                                                d="m18.2906 11.75h-.2535v-1.1855c0-2.19278-1.7415-4.02451-3.9182-4.06361-.0595-.00107-.1783-.00107-.2378 0-2.1767.0391-3.91819 1.87083-3.91819 4.06361v1.1855h-.25354c-.39069 0-.70937.4028-.70937.9003v5.9463c0 .4969.31868.9035.7094.9035h8.5812c.3907 0 .7094-.4066.7094-.9035v-5.9463c0-.4974-.3187-.9003-.7094-.9003zm-3.4867 3.8674v1.7967c0 .2058-.1723.3799-.3784.3799h-.8509c-.2061 0-.3785-.1741-.3785-.3799v-1.7967c-.1999-.1966-.3162-.4684-.3162-.7691 0-.5698.4408-1.0594 1.0013-1.082.0594-.0024.1783-.0024.2377 0 .5605.0226 1.0013.5122 1.0013 1.082 0 .3007-.1164.5725-.3163.7691zm1.5623-3.8674h-4.7323v-1.1855c0-1.30621 1.0623-2.38623 2.3661-2.38623s2.3662 1.08002 2.3662 2.38623z">
                                            </path>
                                        </g>
                                    </svg>
                                    <h2 class="fw-normal">Secure donation</h2>
                                </div>
                            </div>

                            <div class="body">

                                <div class="tabs">
                                    <div class="nav btn-group w-100 mb-2" role="group">
                                        <a class="btn py-2 fs-3 active" freq="once" id="one-time-tab"
                                            data-bs-toggle="tab" href="#one-time-products">Give once</a>
                                        <a class="btn py-2 fs-3" freq="monthly" id="monthly-tab" data-bs-toggle="tab"
                                            href="#monthly-products">
                                            <svg viewBox="0 0 128 128" xmlns="http://www.w3.org/2000/svg"
                                                xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img"
                                                class="iconify iconify--noto" preserveAspectRatio="xMidYMid meet"
                                                fill="#000000" style="width: 17px; margin-right: 8px;">
                                                <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                                                <g id="SVGRepo_tracerCarrier" stroke-linecap="round"
                                                    stroke-linejoin="round">
                                                </g>
                                                <g id="SVGRepo_iconCarrier">
                                                    <path
                                                        d="M93.99 8.97c-21.91 0-29.96 22.39-29.96 22.39s-7.94-22.39-30-22.39c-16.58 0-35.48 13.14-28.5 43.01c6.98 29.87 58.56 67.08 58.56 67.08s51.39-37.21 58.38-67.08c6.98-29.87-10.56-43.01-28.48-43.01z"
                                                        fill="#f44336"> </path>
                                                    <g fill="#c33">
                                                        <path
                                                            d="M30.65 11.2c17.2 0 25.74 18.49 28.5 25.98c.39 1.07 1.88 1.1 2.33.06L64 31.35C60.45 20.01 50.69 8.97 34.03 8.97c-6.9 0-14.19 2.28-19.86 7.09c5.01-3.29 10.88-4.86 16.48-4.86z">
                                                        </path>
                                                        <path
                                                            d="M93.99 8.97c-5.29 0-10.11 1.15-13.87 3.47c2.64-1.02 5.91-1.24 9.15-1.24c16.21 0 30.72 12.29 24.17 40.7c-5.62 24.39-38.46 53.98-48.49 65.27c-.64.72-.86 1.88-.86 1.88s51.39-37.21 58.38-67.08c6.98-29.86-10.53-43-28.48-43z">
                                                        </path>
                                                    </g>
                                                    <path
                                                        d="M17.04 24.82c3.75-4.68 10.45-8.55 16.13-4.09c3.07 2.41 1.73 7.35-1.02 9.43c-4 3.04-7.48 4.87-9.92 9.63c-1.46 2.86-2.34 5.99-2.79 9.18c-.18 1.26-1.83 1.57-2.45.46c-4.22-7.48-5.42-17.78.05-24.61z"
                                                        fill="#ff8a80"> </path>
                                                    <path
                                                        d="M77.16 34.66c-1.76 0-3-1.7-2.36-3.34c1.19-3.02 2.73-5.94 4.58-8.54c2.74-3.84 7.95-6.08 11.25-3.75c3.38 2.38 2.94 7.14.57 9.44c-5.09 4.93-11.51 6.19-14.04 6.19z"
                                                        fill="#ff8a80"> </path>
                                                </g>
                                            </svg>
                                            Monthly</a>
                                    </div>

                                    <div class="tab-content my-2">
                                        <div class="tab-pane show active" id="one-time-products">
                                            <div class="row g-2" id="one-time-products-list">
                                                <div class="card placeholder-glow w-100 border-0 p-1">
                                                    <div class="btn-secondary-outline btn py-4 mb-2 w-100 placeholder">
                                                    </div>
                                                    <div class="btn-secondary-outline btn py-4 mb-2 w-66 placeholder">
                                                    </div>
                                                    <div class="btn-secondary-outline btn py-4 mb-2 w-33 placeholder">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="tab-pane" id="monthly-products">
                                            <div class="row g-2" id="monthly-products-list">
                                                <div class="card placeholder-glow w-100 border-0 p-0">
                                                    <div class="btn-secondary-outline btn py-4 mb-2 w-100 placeholder">
                                                    </div>
                                                    <div class="btn-secondary-outline btn py-4 mb-2 w-66 placeholder">
                                                    </div>
                                                    <div class="btn-secondary-outline btn py-4 mb-2 w-33 placeholder">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="footer border-0">
                                <button id="donate-btn" class="btn btn-primary w-100 py-3 fw-bold fs-3"
                                    onclick="saveDonationAmount(this)">
                                    <i class="ti ti-credit-card-pay me-2"></i>
                                    <span>Donate Once</span>
                                </button>
                            </div>

                        </div>

                        <div class="slide" id="slide-user-info">

                            <div
                                class="header border-bottom d-flex align-items-center justify-content-center position-relative pt-4 pb-2">
                                <button class="back-btn btn btn-icon btn-light">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                        stroke-linejoin="round"
                                        class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-left">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                        <path d="M15 6l-6 6l6 6" />
                                    </svg>
                                </button>
                                <h3 class="fw-bold">Enter your details</h3>
                            </div>

                            <div class="body">
                                <div class="mb-3 position-relative" id="donor-info-form">
                                    <div class="form-floating">
                                        <input name="firstName" type="text"
                                            class="user-info form-control rounded-top-3 rounded-bottom-0"
                                            id="first-name" placeholder="Your name">
                                        <label for="first-name">First name</label>
                                    </div>
                                    <div class="form-floating">
                                        <input name="lastName" type="text" class="user-info form-control rounded-0"
                                            id="last-name" placeholder="Last name">
                                        <label for="last-name">Last name</label>
                                    </div>
                                    <div class="form-floating">
                                        <input name="email" type="email" class="user-info form-control rounded-0"
                                            id="email" placeholder="your@email.com">
                                        <label for="floatingPassword">Email address</label>
                                    </div>
                                    <div id="tel-wrapper">
                                        <div class="dropdown dropup">
                                            <a href="#" class="btn bg-transparent" id="tel-toggle"
                                                data-bs-toggle="dropdown"></a>
                                            <div class="dropdown-menu" id="tel-codes"> </div>
                                        </div>
                                        <div class="form-floating">
                                            <input name="tel" type="tel"
                                                class="user-info form-control rounded-bottom-3 rounded-top-0"
                                                id="contact-number" placeholder="9292929" inputmode="tel">
                                            <label for="contact-number">Phone number</label>
                                        </div>
                                    </div>

                                </div>

                                <div id="donor-concents">

                                    <div class="d-flex">
                                        <div class="form-check">
                                            <input name="organization" class="user-info form-check-input"
                                                type="checkbox" id="organizationCheckbox">
                                            <label class="form-check-label" for="organizationCheckbox">
                                                Donate as an organization
                                            </label>
                                        </div>
                                        <span class="ms-2 form-help" data-bs-toggle="popover" data-bs-placement="top"
                                            data-bs-content="Select if you're donating on behalf of an organization. The donation receipt will be issued to that organization.">?</span>
                                    </div>

                                    <div id="organizationInputContainer" class="d-none mb-3"></div>

                                    <div class="d-flex">
                                        <div class="form-check">
                                            <input name="anonymous" class="user-info form-check-input" type="checkbox"
                                                id="anonymousCheckbox">
                                            <label class="form-check-label" for="anonymousCheckbox">
                                                Donate anonymously
                                            </label>
                                        </div>
                                        <span class="ms-2 form-help" data-bs-toggle="popover" data-bs-placement="top"
                                            data-bs-content="We won't display your information in any public feeds.">?</span>
                                    </div>

                                </div>
                            </div>


                            <div class="footer border-0">
                                <button id="save-user-btn" class="btn btn-primary w-100 py-3 fw-bold fs-3"
                                    onclick="saveUserInfo(this)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                        stroke-linejoin="round"
                                        class="icon icon-tabler icons-tabler-outline icon-tabler-credit-card-pay">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                        <path d="M12 19h-6a3 3 0 0 1 -3 -3v-8a3 3 0 0 1 3 -3h12a3 3 0 0 1 3 3v4.5" />
                                        <path d="M3 10h18" />
                                        <path d="M16 19h6" />
                                        <path d="M19 16l3 3l-3 3" />
                                        <path d="M7.005 15h.005" />
                                        <path d="M11 15h2" />
                                    </svg>
                                    <span>Continue</span>
                                </button>
                            </div>


                        </div>

                        <div class="slide" id="slide-payment-info">
                            <div
                                class="header border-bottom d-flex align-items-center justify-content-center position-relative pt-4 pb-2">
                                <button class="back-btn btn btn-icon btn-light">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                        stroke-linejoin="round"
                                        class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-left">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                        <path d="M15 6l-6 6l6 6" />
                                    </svg>
                                </button>
                                <h3 class="fw-bold">You donate</h3>
                            </div>

                            <div class="body">
                                <div class="mb-4">
                                    <h3 class="fw-normal">Choose a payment method</h3>
                                    <div class="btn-group-vertical w-100" role="group">
                                        <input type="radio" class="btn-check" name="btn-radio-vertical"
                                            id="btn-radio-vertical-1" autocomplete="off" checked="">
                                        <label for="btn-radio-vertical-1" type="button"
                                            class="rounded-top-3 btn py-2 fs-3 active" data-value="creditCard"
                                            onclick="selectPaymentBtn(this)">Credit
                                            Card</label>
                                        <input type="radio" class="btn-check" name="btn-radio-vertical"
                                            id="btn-radio-vertical-2" autocomplete="off">
                                        <label for="btn-radio-vertical-2" type="button" id="expressPaySelector"
                                            data-value="expressPay" class="rounded-bottom-3 btn py-2 fs-3"
                                            onclick="selectPaymentBtn(this)">Apple or Google
                                            Pay</label>
                                    </div>
                                </div>
                                <div id="payment-form" class="position-relative">
                                    <div class="form-floating">
                                        <div id="card-number-element"
                                            class="card-input form-control rounded-top-3 rounded-bottom-0"></div>
                                        <label for="contact-number">Card Number</label>
                                    </div>
                                    <div class="row g-0">
                                        <div class="form-floating col-6">
                                            <div id="card-expiry-element" class="card-input form-control rounded-0"
                                                style="border-bottom-left-radius: var(--tblr-border-radius-lg)!important">
                                            </div>
                                            <label for="contact-number">Expiration</label>
                                        </div>
                                        <div class="form-floating col-6">
                                            <div id="card-cvc-element" class="card-input form-control rounded-0"
                                                style="border-bottom-right-radius: var(--tblr-border-radius-lg)!important">
                                            </div>
                                            <label for="contact-number">CVC</label>
                                        </div>
                                    </div>
                                    <div id="payment-error"
                                        class="text-error text-red fw-bold p-3 rounded-3 mt-3 border border-red d-none">
                                    </div>
                                </div>
                            </div>

                            <div class="footer border-0">
                                <div class="d-flex justify-content-between flex-wrap py-3">
                                    <hr class="w-100 mb-3">
                                    <div class="text-dark fw-strong">Total</div>
                                    <div class="text-dark fw-strong" id="stripe-total">300 NOK / month</div>
                                </div>
                                <div class="w-100 d-none" id="express-checkout-element">

                                </div>
                                <button id="stripe-submit" class="btn btn-primary w-100 py-3 fw-bold fs-3">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                        stroke-linejoin="round"
                                        class="icon icon-tabler icons-tabler-outline icon-tabler-credit-card-pay">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                        <path d="M12 19h-6a3 3 0 0 1 -3 -3v-8a3 3 0 0 1 3 -3h12a3 3 0 0 1 3 3v4.5" />
                                        <path d="M3 10h18" />
                                        <path d="M16 19h6" />
                                        <path d="M19 16l3 3l-3 3" />
                                        <path d="M7.005 15h.005" />
                                        <path d="M11 15h2" />
                                    </svg>
                                    <span>Pay Now</span>
                                </button>
                            </div>
                        </div>

                        <div class="slide" id="slide-thank-you">
                            <div
                                class="header d-flex align-items-center justify-content-center position-relative pt-4 pb-2">
                                <h3 class="fw-normal">Thank you for your payment!</h3>
                            </div>
                            <div class="d-flex h-100 justify-content-center align-items-center">
                                <dotlottie-player
                                    src="https://lottie.host/9606ee9c-1a99-4dd7-ae0e-669c1092ad3e/9JpFanQfov.lottie"
                                    background="transparent" speed="1" style="width: 300px; height: 300px" direction="1"
                                    loop autoplay></dotlottie-player>
                            </div>
                            <div class="footer border-0">
                                <a class="btn btn-primary w-100 py-3 fw-bold fs-3" id="show-dashboard">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                        stroke-linejoin="round"
                                        class="icon icon-tabler icons-tabler-outline icon-tabler-home-hand">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                        <path d="M18 9l-6 -6l-9 9h2v7a2 2 0 0 0 2 2h3.5" />
                                        <path d="M9 21v-6a2 2 0 0 1 2 -2h2" />
                                        <path
                                            d="M16 17.5l-.585 -.578a1.516 1.516 0 0 0 -2 0c-.477 .433 -.551 1.112 -.177 1.622l1.762 2.456c.37 .506 1.331 1 2 1h3c1.009 0 1.497 -.683 1.622 -1.593c.252 -.938 .378 -1.74 .378 -2.407c0 -1 -.939 -1.843 -2 -2h-1v-2.636c0 -.754 -.672 -1.364 -1.5 -1.364s-1.5 .61 -1.5 1.364v4.136z" />
                                    </svg>
                                    <span>Go to your dashboard</span>
                                </a>
                            </div>
                        </div>

                    </div>
                </div>

            </div>

            <div class="d-none d-md-block col-12 text-center mt-3 fs-5">
                <a class="cursor-pointer text-white m-auto" data-bs-html="true" data-bs-toggle="popover"
                    data-bs-placement="top" data-bs-content="
                    <h4 class='mb-1'>Is my donation secure?</h4>
                    Yes, we use industry-standard SSL technology to keep your information secure. We partner with Stripe, the industry's established payment processor trusted by some of the world's largest companies.
                    Your sensitive financial information never touches our servers. We send all data directly to Stripe's PCI-compliant servers through SSL.
                    ">
                    Is my donation secure?
                </a>
                <span class="mx-2 text-white">·</span>
                <a class="cursor-pointer text-white m-auto" data-bs-html="true" data-bs-toggle="popover"
                    data-bs-placement="top" data-bs-content="
                    <h4 class='mb-1'>Can I cancel my recurring donation?</h4> 
                    Of course. You always remain in full control of your recurring donation, and you’re free to change or cancel it at any time.
                    ">
                    Can I cancel my recurring donation?
                </a>
            </div>

            <div class="d-md-none col-12 p-3 fs-4 card border-0">
                <div class="faq-item">
                    <h4 class="mb-1 fw-normal toggle-faq" style="cursor: pointer;">
                        <i class="ti ti-chevron-right me-1 transition"></i>
                        Is my donation secure?
                    </h4>
                    <div class="faq-answer d-none mb-3">
                        Yes, we use industry-standard SSL technology to keep your information secure. We partner with
                        Stripe, the industry's established payment processor trusted by some of the world's largest
                        companies.
                        Your sensitive financial information never touches our servers. We send all data directly to
                        Stripe's PCI-compliant servers through SSL.
                    </div>
                </div>

                <div class="faq-item mt-1">
                    <h4 class="mb-1 fw-normal toggle-faq" style="cursor: pointer;">
                        <i class="ti ti-chevron-right me-1 transition"></i>
                        Can I cancel my recurring donation?
                    </h4>
                    <div class="faq-answer d-none mb-3">
                        Of course. You always remain in full control of your recurring donation, and you’re free to
                        change or cancel it at any time.
                    </div>
                </div>

                <a id="manage-donation" href="" class="mt-1 text-small">Manage your donation</a>
            </div>

        </div>
        <button id="close-overlay" class="btn rounded-circle btn-icon text-dark p-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                class="icon icon-tabler icons-tabler-outline icon-tabler-x">
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M18 6l-12 12" />
                <path d="M6 6l12 12" />
            </svg>
        </button>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@tabler/core@1.0.0-beta24/dist/js/tabler.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"
        integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/@dotlottie/player-component@2.7.12/dist/dotlottie-player.mjs" type="module"></script>
    <script src="https://js.stripe.com/v3/"></script>
    <script src="/static/maskList.js"></script>
    <script>

        // STRIPE CHARGE ONE TIME

        const handleOneTimePayment = async function () {
            const stripe = Stripe(
                '{{data.publicKey}}',
            );

            const orderId = $('#project-entries').attr('order-id');

            const data = await $.ajax({
                url: `/create-payment-intent/${orderId}/{{data.project.slug}}`,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    email: $('[name=email]').val(),
                    firstName: $('[name=firstName]').val(),
                    lastName: $('[name=lastName]').val(),
                    tel: $('[name=tel]').val(),
                    organization: $('[name=organization]').is(':checked') ? $('#organizationName').val() : '',
                    anonymous: $('[name=anonymous]').is(':checked'),
                    countryCode: localStorage.getItem('countryCode'),
                }),
            })

            const { cardNumber, elements } = await mountStripeElems(stripe, data.clientSecret);

            await mountExpressCheckout(stripe, data.clientSecret, cardNumber, false, elements);

            return true;
        }

        const chargeOneTime = async function (stripe, clientSecret, cardNumber, elements) {
            const elem = $('#stripe-submit');
            const currentBtnHtml = $('#stripe-submit').html();
            $(elem).html(`
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    Processing
                `);
            $('#payment-error').addClass('d-none');

            try {

                let paymentIntent, error;

                if (cardNumber) {
                    ({ paymentIntent, error } = await stripe.confirmCardPayment(clientSecret, {
                        payment_method: {
                            card: cardNumber,
                            billing_details: {
                                name: `${$('[name=firstName]').val()} ${$('[name=lastName]').val()}`,
                                email: $('[name=email]').val(),
                            },
                        },
                    }));
                    if (error) {
                        console.error("Payment Intent Error:", error);
                        showCardError(elem, error.message, currentBtnHtml);
                        return;
                    }
                } else if (elements) {
                    const orderId = $('#project-entries').attr('order-id');
                    ({ paymentIntent, error } = await stripe.confirmPayment({
                        elements,
                        clientSecret,
                        confirmParams: {
                            return_url: `https://partner.akeurope.org/widget-payment-success/${orderId}/{{data.project.slug}}`,
                        },
                        redirect: "if_required",
                    }));
                    if (error) {
                        console.error("Payment Intent Error:", error);
                        alert(error.message);
                        return;
                    }
                }

                const orderId = $('#project-entries').attr('order-id');

                const paymentData = await $.ajax({
                    url: `/create-one-time/${orderId}/{{data.project.slug}}`,
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        paymentIntentId: paymentIntent.id,
                        paymentMethodId: paymentIntent.payment_method,
                        email: $('[name=email]').val(),
                    }),
                });

                if (paymentData.success) {
                    await drawOrderEntries();
                    await $.ajax({
                        url: `/widget-order-customer/${orderId}/${paymentData.customerId}`,
                        method: 'POST',
                        contentType: 'application/json',
                    });
                    $(elem).removeClass('bg-danger').html(currentBtnHtml);
                    $('#slide-container').css({ transform: `translateX(-${3 * 100}%)` });
                    $('.back-btn').attr({ index: 3 });
                    $('#show-dashboard').attr({
                        href: paymentData.dashboardLink,
                        target: '_blank'
                    });
                } else {
                    console.log(paymentData);
                    showCardError(elem, paymentData.responseText, currentBtnHtml);
                }

            } catch (error) {
                console.log(error);
                showCardError(elem, error.responseText, currentBtnHtml);
            }
        }

        // STRIPE CHARGE MONTHLY

        const handleMonthlyPayment = async function () {

            const stripe = Stripe(
                '{{data.publicKey}}',
            );

            const orderId = $('#project-entries').attr('order-id');

            const data = await $.ajax({
                url: `/create-setup-intent/${orderId}/{{data.project.slug}}`,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    email: $('[name=email]').val(),
                    firstName: $('[name=firstName]').val(),
                    lastName: $('[name=lastName]').val(),
                    tel: $('[name=tel]').val(),
                    organization: $('[name=organization]').is(':checked') ? $('#organizationName').val() : '',
                    anonymous: $('[name=anonymous]').is(':checked'),
                    countryCode: localStorage.getItem('countryCode'),
                }),
            })

            const { cardNumber, elements } = await mountStripeElems(stripe, data.clientSecret);

            await mountExpressCheckout(stripe, data.clientSecret, cardNumber, true, elements);

            return true;

        }

        const startMonthlySubscription = async function (stripe, clientSecret, cardNumber, elements) {

            const elem = $('#stripe-submit');
            const currentBtnHtml = $('#stripe-submit').html();
            $(elem).html(`
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    Processing
                `);
            $('#payment-error').addClass('d-none');

            try {

                let setupIntent, error;

                if (cardNumber) {
                    ({ setupIntent, error } = await stripe.confirmCardSetup(clientSecret, {
                        payment_method: {
                            card: cardNumber,
                            billing_details: {
                                name: `${$('[name=firstName]').val()} ${$('[name=lastName]').val()}`,
                                email: $('[name=email]').val(),
                            },
                        },
                    }));

                    if (error) {
                        console.error("SetupIntent Error:", error);
                        showCardError(elem, error.message, currentBtnHtml);
                        return;
                    }
                } else if (elements) {
                    const orderId = $('#project-entries').attr('order-id');
                    ({ setupIntent, error } = await stripe.confirmSetup({
                        elements,
                        clientSecret,
                        confirmParams: {
                            return_url: `https://partner.akeurope.org/widget-payment-success/${orderId}/{{data.project.slug}}`,
                        },
                        redirect: "if_required",
                    }));
                    if (error) {
                        console.error("Payment Intent Error:", error);
                        alert(error.message);
                        return;
                    }
                }

                const orderId = $('#project-entries').attr('order-id');

                const subscriptionData = await $.ajax({
                    url: `/create-subscription/${orderId}/{{data.project.slug}}`,
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        paymentMethodId: setupIntent.payment_method,
                        email: $('[name=email]').val(),
                    }),
                });

                if (subscriptionData.success) {
                    await drawOrderEntries();
                    await $.ajax({
                        url: `/widget-order-customer/${orderId}/${subscriptionData.customerId}`,
                        method: 'POST',
                        contentType: 'application/json',
                    });
                    $(elem).removeClass('bg-danger').html(currentBtnHtml);
                    $('#slide-container').css({ transform: `translateX(-${3 * 100}%)` });
                    $('.back-btn').attr({ index: 3 });
                    $('#show-dashboard').attr({
                        href: subscriptionData.dashboardLink,
                        target: '_blank'
                    });
                } else {
                    console.log(subscriptionData);
                    alert(subscriptionData);
                    showCardError(elem, subscriptionData, currentBtnHtml);
                }

            } catch (error) {
                console.log(error);
                showCardError(elem, error.responseText, currentBtnHtml);
            }
        }

        // STRIPE MOUNT ELEMENTS

        const mountStripeElems = async function (stripe, clientSecret) {

            const elements = stripe.elements({ clientSecret });

            const elementStyles = {
                base: {
                    fontFamily: 'Roboto',
                    fontSize: '15px',
                    fontWeight: 'normal',
                    '::placeholder': { color: 'transparent' },
                },
                invalid: { color: '#e3342f' },
            };

            const elementClasses = {
                base: 'form-control stripe-input',
                focus: 'form-control-focus',
                invalid: 'is-invalid',
            };

            const cardNumber = elements.create('cardNumber', {
                style: elementStyles,
                classes: elementClasses,
                placeholder: '1234 1234 1234 1234',
            });
            const cardExpiry = elements.create('cardExpiry', { style: elementStyles, classes: elementClasses, placeholder: '12 / 34' });
            const cardCvc = elements.create('cardCvc', { style: elementStyles, classes: elementClasses, placeholder: '123' });
            $('.card-input').html('');
            cardNumber.mount('#card-number-element');
            cardExpiry.mount('#card-expiry-element');
            cardCvc.mount('#card-cvc-element');

            function showPlaceholder(element) {
                element.update({ style: { base: { '::placeholder': { color: 'lightgrey' } } } });
            }

            function hidePlaceholder(element) {
                element.update({ style: { base: { '::placeholder': { color: 'transparent' } } } });
            }

            function handleFloatingLabel(element, parentSelector) {
                let isFilled = false;
                element.on('focus', function () {
                    $(parentSelector).addClass('active');
                    $(parentSelector).addClass('typing');
                    showPlaceholder(element);
                });

                element.on('blur', function () {
                    $(parentSelector).removeClass('typing');
                    if (isFilled) {
                        return;
                    }
                    hidePlaceholder(element);
                    $(parentSelector).removeClass('active');
                });

                element.on('change', function (event) {
                    if (event.empty) {
                        isFilled = false;
                    } else {
                        isFilled = true;
                        $(parentSelector).addClass('active');
                        showPlaceholder(element);
                    }
                });
            }

            handleFloatingLabel(cardNumber, '#card-number-element');
            handleFloatingLabel(cardExpiry, '#card-expiry-element');
            handleFloatingLabel(cardCvc, '#card-cvc-element');

            return { cardNumber, cardExpiry, cardCvc, elements };
        }

        const mountExpressCheckout = async function (stripe, clientSecret, cardNumber, monthly, elements) {

            const orderId = $('#project-entries').attr('order-id');

            if (!orderId) return alert('order id is not given');

            const order = await getOrderData(orderId);

            if (monthly) {
                $('#stripe-total').html(`${order.totalCostSingleMonth} ${order.currency} / Month`);
                $('#stripe-submit').find('span').html('Subscribe');
                $('#stripe-submit').off('click').on('click', function (e) {
                    startMonthlySubscription(stripe, clientSecret, cardNumber);
                })
            } else {
                $('#stripe-total').html(`${order.totalCost} ${order.currency}`);
                $('#stripe-submit').find('span').html('Pay Now');
                $('#stripe-submit').off('click').on('click', function (e) {
                    chargeOneTime(stripe, clientSecret, cardNumber);
                })
            }

            const supportedCountries = [
                "AE", "AT", "AU", "BE", "BG", "BR", "CA", "CH", "CI", "CR", "CY", "CZ", "DE", "DK", "DO", "EE", "ES", "FI",
                "FR", "GB", "GI", "GR", "GT", "HK", "HR", "HU", "ID", "IE", "IN", "IT", "JP", "LI", "LT", "LU", "LV", "MT",
                "MX", "MY", "NL", "NO", "NZ", "PE", "PH", "PL", "PT", "RO", "SE", "SG", "SI", "SK", "SN", "TH", "TT", "US", "UY"
            ];

            const isSupportedCountry = supportedCountries.includes(order.countryCode) ? order.countryCode : false;

            if (!isSupportedCountry) {
                $('#expressPaySelector').siblings('label').addClass('rounded-bottom-3');
                $('#expressPaySelector').remove();
                return console.log('express pay is not supported for this country');
            }

            try {
                const amount = monthly
                    ? Math.max(1, Math.round(order.totalCostSingleMonth * 100))
                    : Math.max(1, Math.round(order.totalCost * 100));

                const paymentRequest = stripe.paymentRequest({
                    country: order.countryCode,
                    currency: order.currency.toLowerCase(),
                    total: {
                        label: monthly ? `Monthly Subscription - ${order.orderNo}` : `One Time Payment - ${order.orderNo}`,
                        amount
                    },
                    requestPayerName: true,
                    requestPayerEmail: true,
                });

                paymentRequest.canMakePayment().then((result) => {

                    if (!result) {
                        $('#expressPaySelector').siblings('label').addClass('rounded-bottom-3');
                        $('#expressPaySelector').remove();
                        return;
                    }

                    let paymentMethods = {
                        applePay: result.applePay ? 'auto' : 'never',
                        googlePay: result.googlePay ? 'auto' : 'never',
                    };

                    const expressCheckoutElement = elements.create('expressCheckout', {
                        paymentMethodOrder: ['apple_pay', 'google_pay'],
                        paymentMethods: paymentMethods,
                        buttonType: {
                            applePay: 'buy',
                            googlePay: 'buy',
                        },
                        buttonTheme: {
                            applePay: 'black',
                            googlePay: 'black',
                        },
                        buttonHeight: 55,
                    });

                    expressCheckoutElement.on("confirm", async (event) => {
                        if (monthly) {
                            startMonthlySubscription(stripe, clientSecret, null, elements);
                        } else {
                            chargeOneTime(stripe, clientSecret, null, elements);
                        }
                    });

                    expressCheckoutElement.mount('#express-checkout-element');

                    if (result.applePay) {
                        $('#expressPaySelector').html('Apply Pay');
                    } else if (result.googlePay) {
                        $('#expressPaySelector').html('Google Pay');
                    } else {
                        $('#expressPaySelector').html('Express Pay');
                    }
                });

            } catch (error) {
                console.log(error);
                $('#expressPaySelector').siblings('label').addClass('rounded-bottom-3');
                $('#expressPaySelector').remove();
            }
        }

        // START WIDGET

        const startWidget = async function () {
            let countryCode = '{{data.donor.countryCode}}';
            if (!countryCode) {
                try {
                    const response = await fetch('https://ipwho.is?fields=country_code', { mode: 'cors' });
                    const data = await response.json();
                    countryCode = data.country_code ? data.country_code : 'NO';
                } catch (error) {
                    console.log(error);
                    countryCode = 'NO';
                }
            }
            localStorage.setItem('countryCode', countryCode);
            await createNewOrder();
            const orderId = $('#project-entries').attr('order-id');
            if (!orderId) return alert('no order available');
            const order = await getOrderData(orderId);
            await drawTotalCosts(order);
            await refreshDropdowns();
            initializePopovers();

            $('[name=email]').val('{{data.donor.email}}');
            $('[name=firstName]').val('{{data.donor.firstName}}');
            $('[name=lastName]').val('{{data.donor.lastName}}');
        };

        window.onload = startWidget;

        function initializePopovers() {
            var popoverTriggerList = Array.from(document.querySelectorAll('[data-bs-toggle="popover"]'));
            popoverTriggerList.forEach(function (popoverTriggerEl) {
                new bootstrap.Popover(popoverTriggerEl);
            });
        }

        const saveUserInfo = async function (elem) {
            let isValid = true;

            $('.shake').removeClass('shake');

            $('.user-info').each(function () {
                let isValidInput = true;
                $(this).removeClass('is-invalid');
                const type = $(this).attr('type');
                const value = $(this).val();
                if (type === 'email') {
                    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (!emailPattern.test(value)) {
                        isValidInput = false;
                    }
                }

                if (type === 'tel') {
                    const phoneDigits = value.replace(/\D/g, '');
                    if (phoneDigits.length < 5) {
                        isValidInput = false;
                    }
                }

                if (type === 'text') {
                    if (value.length < 3) {
                        isValidInput = false;
                    }
                }

                if (!isValidInput) {
                    isValid = false;
                    $(this).addClass('is-invalid');
                    $(this).closest('.body').addClass('shake');
                }
            });

            $('.shake').one('animationend', function () {
                $(this).removeClass('shake');
            });

            try {
                if (isValid) {
                    const currentBtnHtml = $('#save-user-btn').html();
                    $('#save-user-btn').html(`<span class="spinner-border spinner-border-sm mx-2" role="status"></span> Processing ...`);
                    const monthly = $('#project-entries').attr('monthly');
                    if (monthly) {
                        await handleMonthlyPayment();
                    } else {
                        await handleOneTimePayment();
                    }

                    $('#slide-container').css({ transform: `translateX(-${2 * 100}%)` });
                    $('.back-btn').attr({ index: 2 });

                    $('#save-user-btn').html(currentBtnHtml);
                }
            } catch (error) {
                console.log(error);
                alert(error);
            }

        };

        const showCardError = function (elem, message, currentBtnHtml) {
            $(elem).addClass('bg-danger').html(`<i class="ti ti-credit-card-off me-1"></i> Error!`);
            $(elem).popover('dispose');
            $(elem)
                .popover({
                    content: `<div class="text-red fw-bold m-0" 
                                    style="border-radius: 4px; padding: 10px;">
                                    ${message}
                                  </div>`,
                    placement: 'top',
                    trigger: 'manual',
                    html: true,
                    template: `<div class="popover bg-danger-lt border-0 shadow-md" role="tooltip">
                                    <div class="popover-arrow d-none"></div>
                                    <div class="popover-body p-2"></div>
                                  </div>`,
                })
                .popover('show');
            setTimeout(function () {
                $(elem).popover('hide');
                $(elem).removeClass('bg-danger').html(currentBtnHtml);
            }, 6000);
            return;
        }

        const createNewOrder = async function () {
            try {
                const countryCode = localStorage.getItem('countryCode');
                if (!countryCode) return alert('no country code found!');
                const response = await $.ajax({
                    url: `/widget-new-order/{{data.project.slug}}?countryCode=${countryCode}`,
                    method: 'GET',
                    contentType: 'application/json',
                });

                $('#project-entries').replaceWith(response);
                initializePopovers();
            } catch (xhr) {
                console.error("Error:", xhr);
                alert(xhr.responseText || "An error occurred while creating the order.");
            }
        }

        const loadMoreContent = function (elem) {
            const orderId = $('#project-entries').attr('order-id');
            const slug = $('#project-entries').attr('project-slug');
            if (!orderId || !slug) return alert('orderId and slug is required to load more content!');
            const currentBtnHtml = $(elem).html();
            $(elem).html(`<span class="spinner-border spinner-border-sm mx-2" role="status"></span> Loading ...`);
            $.ajax({
                url: `/widget-update-order/${orderId}/${slug}?addEntries=true`,
                method: 'POST',
                contentType: 'application/json',
                success: response => {
                    $(elem).html(currentBtnHtml);
                    $('#scroll-loader').before(response);
                    initializePopovers();
                },
                error: error => {
                    $(elem).html(currentBtnHtml);
                    alert(error);
                }
            })
        }

        const drawOrderEntries = async function () {
            try {
                const orderId = $('#project-entries').attr('order-id');
                const slug = $('#project-entries').attr('project-slug');
                const response = await $.ajax({
                    url: `/widget-render-entries/${orderId}/${slug}`,
                    method: 'GET',
                    contentType: 'application/json',
                });
                $('#project-entries').replaceWith(response);
                initializePopovers();
            } catch (xhr) {
                console.error("Error:", xhr);
                alert(xhr.responseText || "An error occurred while creating the order.");
            }
        }

        const getOrderData = async function (orderId) {
            try {
                const order = await $.ajax({
                    url: `/widget-order/${orderId}`,
                    method: 'GET',
                    contentType: 'application/json',
                });
                return order;
            } catch (xhr) {
                console.error("Error:", xhr);
                alert(xhr.responseText || "An error occurred while creating the order.");
            }
        }

        const refreshDropdowns = async function () {
            try {
                const userCountry = localStorage.getItem('countryCode');
                if (!userCountry) return alert('no country found!');

                const data = await $.ajax({
                    url: `/get-country-list/${userCountry}`,
                    method: 'GET',
                    contentType: 'application/json',
                    dataType: 'json'
                });

                populateCurrencyDropdown(data.countries);
                populateTelephoneDropdown(data.countries);

                $('.donation-amount').first().addClass('active');

                $('.currency-dropdown').val(data.country.currency.code);

                $('#tel-toggle').html(`
                        <span class="flag flag-country-${data.country.code.toLowerCase()} me-1"></span>
                        <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-down"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M6 9l6 6l6 -6" /></svg>
                    `);

                $('#tel-toggle').data({ value: data.country.code.toLowerCase() });

                $('#contact-number').val(data.country.callingCodes[0].toString());

                $('.currency-dropdown').on('change', function () {
                    const selectedOption = $(this).find(':selected');
                    const value = selectedOption.val();
                    const countryCode = selectedOption.attr('country-code');
                    if (!value || !countryCode) return alert('value and code missing');
                    if (value === 'N/A') return alert('Currency is not supported');
                    $('.donation-amount').html(`<span class="spinner-border spinner-border-sm ms-2" role="status"></span>`);
                    localStorage.setItem('countryCode', countryCode);
                    changeOrderCurrency(value, countryCode);
                });
            } catch (error) {
                console.log(error);
                alert(error);
            }

        };

        const changeOrderCurrency = async function (currency, countryCode) {
            try {
                const orderId = $('#project-entries').attr('order-id');
                await $.ajax({
                    url: `/widget-update-order/${orderId}/{{data.project.slug}}?currency=${currency}&countryCode=${countryCode}`,
                    method: 'POST',
                    contentType: 'application/json',
                    success: response => {
                        console.log(response);
                    },
                    error: (xhr, status, error) => {
                        console.log(error);
                        alert(`${xhr.responseText || error}`);
                    }
                })
                const order = await getOrderData(orderId);
                drawTotalCosts(order);
                drawOrderEntries();
                refreshDropdowns();
            } catch (error) {
                alert(error);
            }
        }

        const drawTotalCosts = async function (order) {
            $('#monthly-products-list, #one-time-products-list').html('');

            if (order.totalCost === 0) {
                const html = '<h3 class="fw-normal text-center mt-4">No beneficiary selected.</h3>';
                $('#monthly-products-list').prepend(html);
                $('#one-time-products-list').prepend(html);
                $('#donate-btn').addClass('d-none');
                return;
            }

            $('#donate-btn').removeClass('d-none');

            const entryHeader = '<h4 class="fw-normal mt-2 mb-0">Select Beneficiaries</h4>';

            const createPriceButton = (entry) => {
                if (entry.totalCost === 0) return '';
                return `
                    <div class="col-12 mb-1">
                        <div entry-id="${entry.entryId}" class="w-100 card card-beneficiary active shadow p-2 d-flex flex-row justify-content-between">
                            <div class="text-small w-66">${entry.detail.name}</div>
                            <div class="text-small mt-auto">${entry.totalCost} ${order.currency}</div>
                        </div>
                    </div>
                `;
            };

            const inputGroupOneTime = `
                <h4 class="fw-normal mt-2 mb-0">Total Amount</h4>
                <div class="col-12">
                    <div class="currency-input-container border-1 rounded-2">
                        <div class="donation-amount amount p-2 ms-1 fs-2" order-cost="${order.totalCost}">${order.totalCost}</div>
                        <div class="currency-selector">
                            ${order.currency}
                            <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="ms-1 icon icon-tabler icons-tabler-outline icon-tabler-chevron-down"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M6 9l6 6l6 -6" /></svg>
                        </div>
                        <select class="currency-dropdown">
                        </select>
                    </div>
                </div>
            `;

            const inputGroupMonthly = `
                <h4 class="fw-normal mt-2 mb-0">Total Amount</h4>
                <div class="col-12">
                    <div class="currency-input-container border-1 rounded-2">
                        <div class="donation-amount amount p-2 fs-2" order-cost="${order.totalCostSingleMonth}">${order.totalCostSingleMonth}</div>
                        <div class="currency-selector">
                            ${order.currency}
                            <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="ms-1 icon icon-tabler icons-tabler-outline icon-tabler-chevron-down"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M6 9l6 6l6 -6" /></svg>
                        </div>
                        <select class="currency-dropdown">
                        </select>
                    </div>
                </div>
            `;

            const monthSelector = `
                <h4 class="fw-normal mt-2 mb-0">Select Months</h4>
                <div class="col-4">
                    <button class="month border btn py-2 w-100 fs-3 amount ${order.project.months === 1 ? 'active' : ''}" value="1">
                        1 M
                    </button>
                </div>
                <div class="col-4">
                    <button class="month border btn py-2 w-100 fs-3 amount ${order.project.months === 6 ? 'active' : ''}" value="6">
                        6 Ms
                    </button>
                </div>
                <div class="col-4">
                    <button class="month border btn py-2 w-100 fs-3 amount ${order.project.months === 12 ? 'active' : ''}" value="12">
                        1 Yr
                    </button>
                </div>
                <div class="col-12">
                    <div class="position-relative" id="month-input-container">
                        <input type="number" class="border month-input amount form-control py-2 fs-2" min="1" max="48" value="${order.project.months}">
                        <div class="month-tab"> Months </div>
                    </div>
                </div>
            `;

            let monthlyHTML = entryHeader + '<div class="entries-selected">';
            order.projects[0].entries.forEach((entry) => {
                monthlyHTML += createPriceButton(entry);
            });
            monthlyHTML += '</div>' + inputGroupMonthly;
            $('#monthly-products-list').prepend(monthlyHTML);

            let oneTimeHTML = entryHeader + '<div class="entries-selected">';
            order.projects[0].entries.forEach((product) => {
                oneTimeHTML += createPriceButton(product);
            });
            oneTimeHTML = oneTimeHTML + '</div>' + monthSelector + inputGroupOneTime;
            $('#one-time-products-list').prepend(oneTimeHTML);

            if (order.monthlySubscription) {
                var tab = new bootstrap.Tab($('#monthly-tab')[0]);
                tab.show();
                $('#donate-btn').find('span').html('Donate Monthly');
                $('.donation-amount').last().addClass('active');
            }

            $('.card-beneficiary').on('click', async function () {
                const orderId = $('#project-entries').attr('order-id');
                const entryId = $(this).attr('entry-id');
                if (!orderId || !entryId) {
                    console.log({ orderId, entryId });
                    return alert('no order id or entry id provided');
                }
                await $.ajax({
                    url: `/widget-update-order/${orderId}/{{data.project.slug}}?entryId=${entryId}&subscriptions=empty`,
                    method: 'POST',
                    contentType: 'application/json',
                    success: response => {
                        console.log('subscription removed for entry');
                    },
                    error: (xhr, status, error) => {
                        console.log(error);
                        alert(`${xhr.responseText || error}`);
                    }
                })
                const order = await getOrderData(orderId);
                drawTotalCosts(order);
                drawOrderEntries();
                refreshDropdowns();
            })

            $('.btn.month').on('click', function (e) {
                $(this).closest('.body').find('input.active, button.active').removeClass('active');
                $(this).toggleClass('active');
                const value = $(this).attr('value');
                const input = $(this).closest('.row').find('input');
                input.val(value);
                input.removeClass('is-invalid');
                input.addClass('active');
                changeOrderMonths();
            });

            $('input.month-input').on('keyup blue', function (e) {
                $(this).closest('.body').find('input.active, button.active').removeClass('active');
                $(this).addClass('active');
                const value = $(this).val();
                const btns = $(this).closest('.row').find('.btn.month');
                for (const btn of btns) {
                    $(btn).removeClass('active');
                    if ($(btn).attr('value') === value) {
                        $(btn).addClass('active');
                    }
                }
                if (e.type === 'blur' || e.key === 'Enter' || e.key === ' ' || e.key === 'Tab') {
                    changeOrderMonths();
                }
            });

            const changeOrderMonths = async function () {
                const orderId = $('#project-entries').attr('order-id');
                const months = $('input.month-input').val() > 48 ? 48 : $('input.month-input').val();
                await $.ajax({
                    url: `/widget-update-order/${orderId}/{{data.project.slug}}?months=${months}`,
                    method: 'POST',
                    contentType: 'application/json',
                    success: response => {
                        console.log('months changed!');
                    },
                    error: (xhr, status, error) => {
                        console.log(error);
                        alert(`${xhr.responseText || error}`);
                    }
                })
                const order = await getOrderData(orderId);
                drawTotalCosts(order);
                drawOrderEntries();
                refreshDropdowns();
            }

        }

        $('.toggle-faq').on('click', function () {
            let answer = $(this).next('.faq-answer');
            let icon = $(this).find('i');
            $(this).toggleClass('fw-normal fw-bold');
            answer.toggleClass('d-none');
            icon.toggleClass('ti-chevron-right ti-chevron-down');
        });

        function formatNumberToShortenedVersion(number) {
            if (number >= 1000) {
                const suffixes = ['k', 'M', 'B', 'T'];
                const orderOfMagnitude = Math.floor(Math.log10(number) / 3);
                const shortNumber = (number / Math.pow(1000, orderOfMagnitude)).toFixed(0);

                return `${shortNumber}${suffixes[orderOfMagnitude - 1]}`;
            }

            return number.toString();
        }

        $('[freq]').on('click', async function (e) {
            const freq = $(this).attr('freq');
            const orderId = $('#project-entries').attr('order-id');
            if (!orderId) return alert('no order id provided');
            let url;
            $('.donation-amount').removeClass('active');
            if (freq === 'once') {
                $('#donate-btn').find('span').html('Donate Once');
                $('.donation-amount').first().addClass('active');
                url = `/widget-update-order/${orderId}/{{data.project.slug}}?monthlySubscription=false`;
            } else {
                $('#donate-btn').find('span').html('Donate Monthly');
                $('.donation-amount').last().addClass('active');
                url = `/widget-update-order/${orderId}/{{data.project.slug}}?monthlySubscription=true`;
            }
            await $.ajax({
                url,
                method: 'POST',
                contentType: 'application/json',
                success: response => {
                    console.log(response);
                },
                error: (xhr, status, error) => {
                    console.log(error);
                    alert(`${xhr.responseText || error}`);
                }
            })
            drawOrderEntries();
        });

        $('#tel-toggle').on('show.bs.dropdown', function () {
            $('#tel-toggle').find('svg').replaceWith(`
        <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-up"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M6 15l6 -6l6 6" /></svg>
    `);
        });

        $('#tel-toggle').on('shown.bs.dropdown', function () {
            const selectedCountryCode = $('#tel-toggle').data('value');
            const selectedCountryItem = $(`.dropdown-item[data-value="${selectedCountryCode}"]`);
            $('#tel-codes').find('.bg-hover').removeClass('bg-hover');
            if (selectedCountryItem.length > 0) {
                $('#tel-codes').scrollTop(selectedCountryItem[0].offsetTop - $('#tel-codes')[0].offsetTop - 150);
                $('#tel-codes').find('.bg-hover').removeClass('bg-hover');
                $(selectedCountryItem).addClass('bg-hover');
            }
        });

        $('#tel-toggle').on('hidden.bs.dropdown', function () {
            $('#tel-toggle').find('svg').replaceWith(`
        <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-down"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M6 9l6 6l6 -6" /></svg>
    `);
        });

        function findCommonPrefix(callingCodes) {
            if (!callingCodes.length) return '';

            let prefix = callingCodes[0]; // Start with the first code

            for (let i = 1; i < callingCodes.length; i++) {
                while (!callingCodes[i].startsWith(prefix)) {
                    prefix = prefix.slice(0, -1); // Shorten prefix character by character
                    if (prefix.length === 0) return ''; // No common prefix
                }
            }

            return prefix;
        }

        const populateTelephoneDropdown = function (countries) {
            const dropdown = $('#tel-codes');
            const shortenCountryName = (str) => {
                return str.length > 15 ? str.slice(0, 15) + '...' : str;
            };
            countries = countries.filter((country) => country.callingCodes.length > 0 && country.callingCodes[0] !== '');

            countries.forEach((country) => {
                const countryItem = $('<a>', {
                    class: 'dropdown-item',
                    'data-value': country.code.toLowerCase(),
                    href: '#',
                });

                country.telCode = findCommonPrefix(country.callingCodes);

                countryItem.html(`
                ${shortenCountryName(country.name)} (${country.telCode})
                <span class="flag flag-country-${country.code.toLowerCase()}"></span>
            `);

                dropdown.append(countryItem);

                countryItem.on('click', function () {
                    $('#tel-toggle').data({ value: country.code.toLowerCase() });
                    $('#tel-toggle').html(`<span class="flag flag-country-${country.code.toLowerCase()}"></span>
                <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-down"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M6 9l6 6l6 -6" /></svg>
                `);
                    let currentValue = $('#contact-number').val();
                    if (currentValue.length > 0) {
                        currentValue = currentValue.replace(' ', '');
                        let oldMask = maskList.find((mask) => currentValue.startsWith(mask.code.split(' ')[0]));
                        let oldCode = oldMask ? oldMask.code.split(' ')[0] : '';
                        let remainingNumber = currentValue.replace(oldCode, '').trim();
                        $('#contact-number').val(country.telCode + remainingNumber);
                        $('#contact-number').trigger('input');
                    } else {
                        $('#contact-number').val(country.telCode);
                    }
                });

                countryItem.on('mouseover', function () {
                    $(this).siblings().removeClass('bg-hover');
                    $(this).addClass('bg-hover');
                });
            });

            $('#contact-number').on('input', function () {
                let inputVal = $(this).val().trim();

                if (inputVal.startsWith('00')) {
                    inputVal = '+' + inputVal.slice(2);
                }

                let matchedCountry = countries
                    .filter((country) => country.callingCodes.some((code) => inputVal.startsWith(code)))
                    .sort((a, b) => {
                        let maxCodeA = Math.max(...a.callingCodes.map((code) => code.length));
                        let maxCodeB = Math.max(...b.callingCodes.map((code) => code.length));
                        return maxCodeB - maxCodeA;
                    })[0];

                if (matchedCountry) {
                    $('#tel-toggle').data({ value: matchedCountry.code.toLowerCase() });
                    $('#tel-toggle').html(`<span class="flag flag-country-${matchedCountry.code.toLowerCase()}"></span>
                <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-down"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M6 9l6 6l6 -6" /></svg>
                `);

                    let phoneMask = maskList.find((mask) => inputVal.startsWith(mask.code.split(' ')[0]));

                    if (phoneMask) {
                        let formattedNumber = formatPhoneNumber(inputVal, phoneMask.code);
                        $(this).val(formattedNumber);
                    }
                } else {
                    console.log('match not found');
                }
            });
        };

        function formatPhoneNumber(number, mask) {
            let digits = number.replace(/\D/g, ''); // Remove non-numeric characters
            let maskParts = mask.split(' ');
            let dialingCode = maskParts[0]; // Extract country dialing code (e.g., "+47")

            // Extract only the dialing code part from the input
            let dialingCodeInInput = dialingCode;
            let remainingDigits = digits.slice(dialingCodeInInput.length - 1); // Remove the dialing code from input

            let formattedNumber = dialingCodeInInput; // Start with the dialing code

            // Apply the rest of the mask formatting
            let remainingMask = ' ' + maskParts.slice(1).join(' '); // Everything after the dialing code
            let digitIndex = 0;

            let remainingMaskWithOutSpaces = maskParts.slice(1).join('');

            if (remainingDigits.length > remainingMaskWithOutSpaces.length) {
                formattedNumber = `${dialingCode} ${remainingDigits}`;
                return formattedNumber.trim();
            }

            for (let i = 0; i < remainingMask.length; i++) {
                if (remainingMask[i] === '#') {
                    if (digitIndex < remainingDigits.length) {
                        formattedNumber += remainingDigits[digitIndex];
                        digitIndex++;
                    } else {
                        return formattedNumber.trim();
                    }
                } else {
                    formattedNumber += remainingMask[i];
                }
            }

            return formattedNumber.trim();
        }

        const priorityCurrencies = [
            {
                currency: 'NOK',
                country: 'Norway',
                countryCode: 'NO',
            },
            {
                currency: 'USD',
                country: 'United States',
                countryCode: 'US',
            },
            {
                currency: 'EUR',
                country: 'Europian Union',
                countryCode: 'DE',
            },
            {
                currency: 'GBP',
                country: 'United Kingdom',
                countryCode: 'GB',
            },
        ];

        const populateCurrencyDropdown = function (currencies) {
            const priorityGroup = document.createElement('optgroup');

            priorityCurrencies.forEach((country) => {
                const option = document.createElement('option');
                option.value = country.currency;
                option.setAttribute('country-code', country.countryCode);
                option.textContent = `${country.currency} · ${country.country}`;
                priorityGroup.appendChild(option);
            });

            $('.currency-dropdown').append(priorityGroup);

            const otherGroup = document.createElement('optgroup');

            currencies.forEach((country) => {
                const option = document.createElement('option');
                option.value = country.currency.code;
                option.setAttribute('country-code', country.code);
                option.textContent = `${country.currency.code} · ${country.name}`;
                otherGroup.appendChild(option);
            });

            $('.currency-dropdown').append(otherGroup);
        };

        $('#organizationCheckbox').on('change', function () {
            const inputContainer = $('#organizationInputContainer');
            if ($(this).prop('checked')) {
                inputContainer.removeClass('d-none');
                inputContainer.html(`
                    <div class="form-floating">
                        <input type="text" class="user-info form-control" id="organizationName" placeholder="Organization Name">
                        <label for="organizationName">Organization Name</label>
                    </div>
                `);
            } else {
                inputContainer.addClass('d-none');
                inputContainer.html('');
            }
        });

        $('.back-btn').on('click', async function (e) {
            try {
                const index = Number($(this).attr('index'));
                if (index === 1) {
                    const orderId = $('#project-entries').attr('order-id');
                    await $.ajax({
                        url: `/widget-update-order/${orderId}/{{data.project.slug}}?checkin=true`,
                        method: 'POST',
                        contentType: 'application/json',
                    });
                    drawOrderEntries();
                }
                $('.back-btn').attr({ index: index - 1 });
                $('#slide-container').css({ transform: `translateX(-${(index - 1) * 100}%)` });
            } catch (error) {
                console.log(error);
                alert(error);
            }
        });

        const saveDonationAmount = async function (elem) {
            try {
                const orderId = $('#project-entries').attr('order-id');
                await $.ajax({
                    url: `/widget-update-order/${orderId}/{{data.project.slug}}?checkout=true`,
                    method: 'POST',
                    contentType: 'application/json',
                });
                $('#slide-container').css({ transform: `translateX(-${1 * 100}%)` });
                $('.back-btn').attr({ index: 1 });
                drawOrderEntries();
            } catch (error) {
                console.log(error);
                alert(error);
            }

        };

        const savePaymentInfo = function (elem) {

        }

        $(document).on('input change', 'input', function (e) {
            $(this).closest('div').find('.is-invalid').removeClass('is-invalid');
        });

        const selectPaymentBtn = function (elem) {
            $(elem).siblings('.btn').removeClass('active');
            $(elem).addClass('active');

            const value = $(elem).data('value');

            if (value === 'creditCard') {
                $('#express-checkout-element').addClass('d-none');
                $('#credit-checkout').addClass('d-none');
                $('#payment-form').removeClass('d-none');
                $('#stripe-submit').removeClass('d-none');
            } else if (value === 'expressPay') {
                $('#express-checkout-element').removeClass('d-none');
                $('#credit-checkout').removeClass('d-none');
                $('#stripe-submit').addClass('d-none');
                $('#payment-form').addClass('d-none');
            }
        }

        const selectBeneficiary = async function (elem) {
            $(elem).find('.subscription').toggleClass('active');
            const entry = $(elem).closest('.entry');
            $(elem).find('.ti').replaceWith(`
            <span class="text-small spinner-border spinner-border-sm mt-1" role="status" 
            style="width: 10px; height: 10px; margin-right: 12px"></span>`);
            const subArray = entry.find('.subscription.active').get().map(input => $(input).attr('subscription'));
            const subscriptions = subArray.length > 0 ? subArray.join(',') : 'empty';
            const entryId = entry.attr('entry-id');
            const orderId = entry.attr('order-id');
            await $.ajax({
                url: `/widget-update-order/${orderId}/{{data.project.slug}}?entryId=${entryId}&subscriptions=${subscriptions}`,
                method: 'POST',
                contentType: 'application/json',
                success: response => {
                    $(entry).replaceWith(response);
                },
                error: (xhr, status, error) => {
                    console.log(error);
                    alert(`${xhr.responseText || error}`);
                }
            })
            const order = await getOrderData(orderId);
            await drawTotalCosts(order);
            refreshDropdowns();
        }

        $(document).on('click', ".popover-card", function (event) {
            $('[data-bs-toggle="popover"]').not($(this).find('[data-bs-toggle="popover"]')).popover("hide");
            let popoverElement = $(this).find('[data-bs-toggle="popover"]');
            popoverElement.popover("toggle");
            event.stopPropagation();
        });

        document.addEventListener('click', function (event) {
            const popoverTriggerList = document.querySelectorAll('[data-bs-toggle="popover"]');
            popoverTriggerList.forEach(function (popoverTriggerEl) {
                const popover = bootstrap.Popover.getInstance(popoverTriggerEl);
                if (popover && popover._isShown && !popoverTriggerEl.contains(event.target)) {
                    popover.hide();
                }
            });
        });

        document.getElementById('close-overlay').addEventListener('click', async function () {
            deleteOrder();
            document.getElementById('payment-overlay').remove();
            window.parent.postMessage('close-overlay', '*');
        });

        const deleteOrder = async function () {
            const orderId = $('#project-entries').attr('order-id');
            await $.ajax({
                url: `/widget-update-order/${orderId}/{{data.project.slug}}?deleteOrder=true`,
                method: 'POST',
                contentType: 'application/json',
                success: response => {
                    console.log(response);
                    console.log('order has been deleted. refresh window!');
                },
                fail: error => {
                    console.log(error);
                    alert(error);
                }
            });
        }

        window.addEventListener('beforeunload', deleteOrder);

        let idleTimer;

        function resetTimer() {
            clearTimeout(idleTimer);
            idleTimer = setTimeout(() => deleteOrder(), 5 * 60 * 1000);
        }

        document.addEventListener('mousemove', resetTimer);
        document.addEventListener('keydown', resetTimer);

        resetTimer();

        $(document).ajaxStart(function () {
            $(document).ajaxSend(function (event, jqXHR, settings) {
                console.log("URL:", settings.url);
            });
        });

    </script>

</body>

</html>